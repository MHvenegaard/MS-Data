package view.login;

import handlers.Controller;
import java.awt.Color;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.Socket;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.User;
import view.Mainframe;

/**
 * @author Marc *
 */
public class Login extends javax.swing.JFrame {

    private int loginStatus;

    public Login() {

        loginStatus = 0;
        initComponents();


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textFieldUserName = new javax.swing.JTextField();
        passwordFieldPassword = new javax.swing.JPasswordField();
        progressBar = new javax.swing.JProgressBar();
        buttonLogin = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textFieldUserName.setText("adm");

        passwordFieldPassword.setText("admin");

        progressBar.setMaximum(4);

        buttonLogin.setText("Login");
        buttonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoginActionPerformed(evt);
            }
        });

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ressources/ms-teknik-logo.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138))
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textFieldUserName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(passwordFieldPassword))
                .addContainerGap(124, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(logo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(textFieldUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(passwordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(buttonLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoginActionPerformed

        // A new thread continously updates the login interface
        final Thread t = new Thread(new Runnable() {
            @Override
            public void run() {

                boolean run = true;

                // Initialiserer forbindelsestjek
                Controller controller = null;

                try {
                    setMessage("Initialiserer system");
                    controller = new Controller();
                    progressBar.setValue(loginStatus);

                } catch (ClassNotFoundException ex) {
                    setWarningMessage("MySQL Driveren kunne ikke indl√¶ses");
                }

                // Kontroller internet forbindelse
                try {
                    loginStatus = 1;
                    setMessage("Kontrollerer internetforbindelse");
                    controller.checkInternet();


                    progressBar.setValue(loginStatus);

                } catch (IOException ex) {
                    setWarningMessage("Der kunne ikke oprettes forbindelse til Internettet");
                }

                // Kontroller database forbindelse
                try {
                    loginStatus = 2;
                    setMessage("Kontrollerer databaseforbindelse");
                    Controller.dbHandler.initiateSystemDBConn();
                    progressBar.setValue(loginStatus);

                } catch (SQLException ex) {
                    setWarningMessage("Der kunne ikke oprettes forbindelse til databasen");
                } catch (IOException ex) {
                    setWarningMessage("Der kunne ikke oprettes forbindelse til databasen");
                }

                System.out.println("1");
                //
                // INSERT VERSION TEST HERE
                // RUN THROUGH ALL SP's AND CHECK THEY'VE GOT THE CORRECT VERSION NUMBER


                try {
                    // kontrollerer loginoplysninger
                    // DO STUFF
                    loginStatus = 3;
                    setMessage("Validerer loginoplysninger");
                    


                    System.out.println("2");
                    ArrayList<User> users = Controller.dbHandler.SPgetUsers();
                    System.out.println("3");
                    String username = textFieldUserName.getText();
                    System.out.println("4");
                    char[] pw = passwordFieldPassword.getPassword();
                    String enteredPassword = new String(pw);
                    System.out.println("5");
                    boolean userFound = false;
                    boolean passwordMatch = false;
                    System.out.println("6");
                    int counter = 0;
                    while (!userFound && counter < users.size()) {
                        if (users.get(counter).equals(username)) {
                            userFound = true;
                            String pass = users.get(counter).getPassword();
                            if (pass.equals(enteredPassword)) {
                                passwordMatch = true;
                            }
                        }
                    }
                    if (userFound && passwordMatch) {
                        progressBar.setValue(loginStatus);
                        // Login
                    } else if (!userFound) {
                        // User doesnt exist
                        setWarningMessage("Brugernavnet kan ikke genkendes");
                    } else {
                        // Password doesnt match
                        setWarningMessage("Passwordet matcher ikke brugernavnet");
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }


                loginStatus = 4;
                progressBar.setValue(loginStatus);
                /*        
                 setMessage("Success");
                 Mainframe mf = null;
                 try {
                 mf = new Mainframe();
                 } catch (ClassNotFoundException ex) {
                 Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                 } catch (SQLException ex) {
                 Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                 } catch (IOException ex) {
                 Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                 }
            
       
                 mf.setVisible(true);
                 */
            }
        });
        t.start();

        updateProgressView();
    }//GEN-LAST:event_buttonLoginActionPerformed

    private void login() {
    }

    private void updateProgressView() {
        switch (loginStatus) {
            case 0:
                setMessage("Initialiserer system");
                progressBar.setValue(loginStatus);
            case 1:
                setMessage("Kontrollerer internetforbindelse");
                progressBar.setValue(loginStatus);
            case 2:
                setMessage("Kontrollerer databaseforbindelse");
                progressBar.setValue(loginStatus);
            case 3:
                setMessage("Kontrollerer CRM forbindelse");
                progressBar.setValue(loginStatus);
            case 4:
                setMessage("Kontrollerer ERP forbindelse");
                progressBar.setValue(loginStatus);
            case 5:
                setMessage("Validerer loginoplysninger");
                progressBar.setValue(loginStatus);
        }
    }

    private void setWarningMessage(String msg) {
        progressBar.setBackground(Color.RED);
        labelStatus.setBackground(Color.RED);
        labelStatus.setText(msg);
    }

    private void setMessage(String msg) {
        labelStatus.setBackground(Color.BLACK);
        labelStatus.setText(msg);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLogin;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel logo;
    private javax.swing.JPasswordField passwordFieldPassword;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField textFieldUserName;
    // End of variables declaration//GEN-END:variables
}
